package com.example.Employee.controller;


import com.example.Employee.entity.Employee;
import com.example.Employee.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class EmployeeController {

    @Autowired
    //This used to get bean which is auto-generated by spring
    //We will use an employeeService for each
    private EmployeeService service;


    //Display list of employees
    @GetMapping("/")
    // This means that this method will be executed when user sends GET Requests to "/"
    // In our case, "http://localhost:8080/"
    public String viewHomePage(Model model){
        //	We can use this attribute "listEmployees" to perform server-side rendering of the HTML with using Thymeleaf.
        //	We set all employees data as "listEmployees"
        model.addAttribute("listEmployees", service.getAll());
        //		shows the index.html template:
        return "index";
    }

    //show NewEmployeeForm
    @GetMapping("/showNewEmployeeForm")
    // This means that this method will be executed when user sends GET Requests to "/showNewEmployeeForm"
    // In our case,  "http://localhost:8080/showNewEmployeeForm"
     public String showNewEmployeeForm(Model model){
        Employee employee = new Employee();
        // We can use this attribute "employee" to perform server-side rendering of the HTML with using Thymeleaf.
        // We set employee object as "employee"
        model.addAttribute("Employee",employee);
        //	shows the new_employee.html template:
        return "new_employee";
    }

    //add an employee
   







}
